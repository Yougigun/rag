services:
  rag-api:
    container_name: rag-api
    build:
      context: .
      dockerfile: ./services/rag-api/Dockerfile
    ports: ["3000:3000"]
    depends_on:
      migrate:
        condition: service_completed_successfully
      kafka-setup:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_started
      kafka:
        condition: service_healthy
    environment:
      RUST_LOG: debug
      DATABASE_HOSTNAME: postgres
      DATABASE_USER: raguser
      DATABASE_PASSWORD: ragpassword
      DATABASE_NAME: rag
      DATABASE_URL: postgres://raguser:ragpassword@postgres:5432/rag
      KAFKA_BOOTSTRAP_SERVERS: rag-broker:19092
      QDRANT_URL: http://qdrant:6333
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  file-processor:
    container_name: file-processor
    build:
      context: .
      dockerfile: ./services/file-processor/Dockerfile
    volumes: ["./documents:/documents"]
    depends_on:
      migrate:
        condition: service_completed_successfully
      kafka-setup:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_started
      kafka:
        condition: service_healthy
    environment:
      RUST_LOG: info
      DATABASE_HOSTNAME: postgres
      DATABASE_USER: raguser
      DATABASE_PASSWORD: ragpassword
      KAFKA_BOOTSTRAP_SERVERS: rag-broker:19092
      QDRANT_URL: http://qdrant:6333
      DOCUMENTS_PATH: /documents
    env_file:
      - .env

  migrate:
    container_name: migrate
    image: migrate/migrate:latest
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./migrations:/migrations
    command:
      [
        "-path",
        "/migrations",
        "-database",
        "postgres://raguser:ragpassword@postgres:5432/rag?sslmode=disable",
        "up",
      ]
    restart: "no"

  kafka-setup:
    container_name: kafka-setup
    image: apache/kafka:latest
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./scripts:/scripts
    command: ["sh", "/scripts/kafka-setup.sh"]
    restart: "no"

  postgres:
    container_name: postgres
    image: postgres:latest
    environment:
      POSTGRES_USER: raguser
      POSTGRES_PASSWORD: ragpassword
      POSTGRES_DB: rag
    ports: ["5432:5432"]
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U raguser -d rag"]
      interval: 5s
      timeout: 5s
      retries: 5

  qdrant:
    container_name: qdrant
    image: qdrant/qdrant:latest
    ports: ["6333:6333"]
    volumes:
      - qdrant_data:/qdrant/storage

  kafka:
    image: apache/kafka:latest
    container_name: rag-broker
    ports:
      - "9092:9092"
    restart: unless-stopped
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://rag-broker:19092,PLAINTEXT_HOST://localhost:9092"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@rag-broker:19093"
      KAFKA_LISTENERS: "CONTROLLER://rag-broker:19093,PLAINTEXT://rag-broker:19092,PLAINTEXT_HOST://0.0.0.0:9092"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "/opt/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server localhost:9092",
        ]
      interval: 10s
      timeout: 10s
      retries: 5

volumes:
  postgres_data:
  qdrant_data:
  kafka_data:

networks:
  default:
    name: rag-network
